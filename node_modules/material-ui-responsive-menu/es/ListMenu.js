function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import IconMenu from 'material-ui/IconMenu';
import MenuItem from 'material-ui/MenuItem';
import IconButton from 'material-ui/IconButton/IconButton';
import MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert';

var ListMenu = function (_Component) {
  _inherits(ListMenu, _Component);

  function ListMenu() {
    _classCallCheck(this, ListMenu);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  ListMenu.prototype.render = function render() {
    var _props = this.props,
        items = _props.items,
        iconMenuColor = _props.iconMenuColor;


    return React.createElement(
      IconMenu,
      {
        iconButtonElement: React.createElement(
          IconButton,
          null,
          React.createElement(MoreVertIcon, { color: iconMenuColor !== undefined ? iconMenuColor : undefined })
        ) },
      items.map(function (item, i) {
        return React.createElement(MenuItem, {
          key: i,
          disabled: item.disabled,
          primaryText: item.text,
          onClick: item.onClick
        });
      })
    );
  };

  return ListMenu;
}(Component);

;

ListMenu.propTypes = process.env.NODE_ENV !== "production" ? {
  items: PropTypes.array.isRequired,
  iconMenuColor: PropTypes.string
} : {};

export default ListMenu;